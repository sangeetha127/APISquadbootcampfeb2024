{
	"info": {
		"_postman_id": "d5bf7241-f6a5-4cd2-a922-f22e8416e73f",
		"name": "USER module",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27938910",
		"_collection_link": "https://hackers-at-api.postman.co/workspace/Team-11-API-Bootcamp-Feb-2024~2b554e17-b17f-41a3-a078-cc51f813218c/collection/27938910-d5bf7241-f6a5-4cd2-a922-f22e8416e73f?action=share&source=collection_link&creator=27938910"
	},
	"item": [
		{
			"name": "POST",
			"item": [
				{
					"name": "1Post new user creation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Load data from file\r",
									"if (typeof pm.variables.get('givendatas') !== 'object') {\r",
									"    pm.variables.set('givendatas', pm.iterationData.toObject());\r",
									"}\r",
									"const givendatas = pm.variables.get('givendatas');\r",
									"\r",
									"// Find the current request\r",
									"const currentRequest = givendatas.givendata.filter(({scenarioname}) => scenarioname === pm.info.requestName)[0];\r",
									"\r",
									"// Skip the rest since we have no data\r",
									"if (!currentRequest) {\r",
									"    console.log(`Request ${pm.info.requestName} has no data defined.`);\r",
									"    return;\r",
									"}\r",
									"// Expose variables\r",
									"const variables = currentRequest.data.shift();\r",
									"\r",
									"for (const [key, value] of Object.entries(variables)) {\r",
									"    pm.variables.set(key, value);\r",
									"    pm.collectionVariables.set(\"firstname\", pm.variables.get(\"firstname\"));\r",
									"    pm.collectionVariables.set(\"lastname\", pm.variables.get(\"lastname\"));\r",
									"    pm.collectionVariables.set(\"contactno\", pm.variables.get(\"contactno\"));\r",
									"    pm.collectionVariables.set(\"email\", pm.variables.get(\"email\"));\r",
									"    let useraddressproperties = pm.variables.get(\"userAddress\");\r",
									"        pm.collectionVariables.set(\"plotno\", useraddressproperties.plotno);\r",
									"        pm.collectionVariables.set(\"street\", useraddressproperties.street);\r",
									"        pm.collectionVariables.set(\"state\",useraddressproperties.state);\r",
									"        pm.collectionVariables.set(\"country\", useraddressproperties.country);\r",
									"        pm.collectionVariables.set(\"zipcode\", useraddressproperties.zipcode);\r",
									"    \r",
									"};\r",
									"\r",
									"\r",
									"pm.variables.set('givendatas', givendatas);\r",
									"\r",
									"// Decide where to go next\r",
									"if (currentRequest.data.length > 0) {\r",
									"    postman.setNextRequest(pm.info.requestName);\r",
									"}\r",
									"\r",
									"//pm.collectionVariables.set(\"plotnumber\", data[\"userAddress\"]['plotno']);\r",
									"//pm.collectionVariables.set(\"street\", data[\"userAddress\"]['street']);\r",
									"//pm.collectionVariables.set(\"state\", data[\"userAddress\"]['state']);\r",
									"//pm.collectionVariables.set(\"country\", data[\"userAddress\"]['country']);\r",
									"//pm.collectionVariables.set(\"zipcode\", data[\"userAddress\"]['zipcode']);\r",
									"//pm.collectionVariables.set(\"jsonBody\",JSON.stringify(pm.iterationData.toObject()));\r",
									"//pm.globals.set(\"jsonBody\", JSON.stringify(pm.iterationData.toObject()));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"//status  code and message  verification\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"//saving the second userid purpose\r",
									"if (response.user_last_name === \"san\") {\r",
									"    pm.collectionVariables.set(\"userid1\", pm.globals.get(\"newuserid\"));\r",
									"    pm.collectionVariables.set(\"iterationtimesforpostmandatory\",1);\r",
									"}\r",
									"//settinguserid,firstname global variables\r",
									"pm.globals.set(\"newuserid\", response.user_id);\r",
									"pm.globals.set(\"newfirstname\", response.user_first_name);\r",
									"\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"addressId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"plotNumber\");\r",
									"    pm.expect(pm.response.text()).to.include(\"street\");\r",
									"    pm.expect(pm.response.text()).to.include(\"state\");\r",
									"    pm.expect(pm.response.text()).to.include(\"country\");\r",
									"    pm.expect(pm.response.text()).to.include(\"zipCode\");\r",
									"    pm.expect(pm.response.text()).to.include(\"user_id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"user_first_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"user_last_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"user_contact_number\");\r",
									"    pm.expect(pm.response.text()).to.include(\"user_email_id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"creation_time\");\r",
									"    pm.expect(pm.response.text()).to.include(\"last_mod_time\");\r",
									"});\r",
									"\r",
									"// Check the values have the expected types\r",
									"pm.test(\"validate response body datatypes\", () => {\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.userAddress.addressId).to.be.a('number');\r",
									"    pm.expect(response.userAddress.plotNumber).to.be.a('string');\r",
									"    pm.expect(response.userAddress.street).to.be.a('string');\r",
									"    pm.expect(response.userAddress.state).to.be.a('string');\r",
									"    pm.expect(response.userAddress.country).to.be.a('string');\r",
									"    pm.expect(response.userAddress.zipCode).to.be.a('number');\r",
									"    pm.expect(response.user_id).to.be.a('number');\r",
									"    pm.expect(response.user_first_name).to.be.a('string');\r",
									"    pm.expect(response.user_last_name).to.be.a('string');\r",
									"    pm.expect(response.user_contact_number).to.be.a('number');\r",
									"    pm.expect(response.user_email_id).to.be.a('string');\r",
									"    pm.expect(response.creation_time).to.be.a('string');\r",
									"    pm.expect(response.last_mod_time).to.be.a('string');\r",
									"});\r",
									"\r",
									"//data validation\r",
									"pm.test(\"validate response body data\", () => {\r",
									"    pm.expect(response.userAddress.plotNumber).to.eql(pm.collectionVariables.get(\"plotno\"));\r",
									"    pm.expect(response.userAddress.street).to.eql(pm.collectionVariables.get(\"street\"));\r",
									"    pm.expect(response.userAddress.state).to.eql(pm.collectionVariables.get(\"state\"));\r",
									"    pm.expect(response.userAddress.country).to.eql(pm.collectionVariables.get(\"country\"));\r",
									"    pm.expect(response.userAddress.zipCode).to.eql(pm.collectionVariables.get(\"zipcode\"));\r",
									"    pm.expect(response.user_first_name).to.eql(pm.collectionVariables.get(\"firstname\"));\r",
									"    pm.expect(response.user_last_name).to.eql(pm.collectionVariables.get(\"lastname\"));\r",
									"    pm.expect(response.user_contact_number).to.eql(pm.collectionVariables.get(\"contactno\"));\r",
									"    pm.expect(response.user_email_id).to.eql(pm.collectionVariables.get(\"email\"));\r",
									"});\r",
									"\r",
									"\r",
									"//header verification\r",
									"pm.test(\"Header validation\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//schema validation\r",
									"const responseschema = {\r",
									"\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"userAddress\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"addressId\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"plotNumber\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"street\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"state\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"country\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"zipCode\": {\r",
									"                    \"type\": \"integer\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"addressId\",\r",
									"                \"plotNumber\",\r",
									"                \"street\",\r",
									"                \"state\",\r",
									"                \"country\",\r",
									"                \"zipCode\"\r",
									"            ]\r",
									"        },\r",
									"        \"user_id\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"user_first_name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"user_last_name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"user_contact_number\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"user_email_id\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"creation_time\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"last_mod_time\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"userAddress\",\r",
									"        \"user_id\",\r",
									"        \"user_first_name\",\r",
									"        \"user_last_name\",\r",
									"        \"user_contact_number\",\r",
									"        \"user_email_id\",\r",
									"        \"creation_time\",\r",
									"        \"last_mod_time\"\r",
									"    ]\r",
									"}\r",
									"pm.test(\"Validate schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(responseschema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"user_first_name\": \"{{firstname}}\",\r\n\"user_last_name\": \"{{lastname}}\",\r\n\"user_contact_number\": {{contactno}},\r\n\"user_email_id\": \"{{email}}\",\r\n\"userAddress\": { \r\n \"plotNumber\": \"{{plotno}}\",\r\n \"street\": \"{{street}}\",\r\n \"state\": \"{{state}}\",\r\n \"country\": \"{{country}}\", \r\n \"zipCode\": {{zipcode}}\r\n } \r\n} \r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/createusers",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"createusers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post firstname field validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Load data from file\r",
									"if (typeof pm.variables.get('givendatas1') !== 'object') {\r",
									"    pm.variables.set('givendatas1', pm.iterationData.toObject());\r",
									"}\r",
									"const givendatas = pm.variables.get('givendatas1');\r",
									"\r",
									"// Find the current request\r",
									"const currentRequest = givendatas.givendata.filter(({scenarioname}) => scenarioname === \"Post mandatory fields validation\")[0];\r",
									"\r",
									"// Skip the rest since we have no data\r",
									"if (!currentRequest) {\r",
									"    console.log(`Request ${pm.info.requestName} has no data defined.`);\r",
									"    return;\r",
									"}\r",
									"// Expose variables\r",
									"const variables = currentRequest.data.shift();\r",
									"//if (variables===null || variables!==Object)\r",
									"  //  return;\r",
									"for (const [key, value] of Object.entries(variables)) {\r",
									"    pm.variables.set(key, value);\r",
									"    pm.collectionVariables.set(\"mfirstname\", pm.variables.get(\"firstname\"));\r",
									"    pm.collectionVariables.set(\"mlastname\", pm.variables.get(\"lastname\"));\r",
									"    pm.collectionVariables.set(\"mcontactno\", pm.variables.get(\"contactno\"));\r",
									"    pm.collectionVariables.set(\"memail\", pm.variables.get(\"email\"));\r",
									"    pm.collectionVariables.set(\"emptyfieldname\",pm.variables.get(\"emptyfieldname\"));\r",
									"    let useraddressproperties = pm.variables.get(\"userAddress\");\r",
									"        pm.collectionVariables.set(\"mplotno\", useraddressproperties.plotno);\r",
									"        pm.collectionVariables.set(\"mstreet\", useraddressproperties.street);\r",
									"        pm.collectionVariables.set(\"mstate\",useraddressproperties.state);\r",
									"        pm.collectionVariables.set(\"mcountry\", useraddressproperties.country);\r",
									"        pm.collectionVariables.set(\"mzipcode\", useraddressproperties.zipcode);\r",
									"};\r",
									"//pm.variables.set('givendatas', givendatas);\r",
									"\r",
									"\r",
									" \r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"        pm.expect(pm.response.text()).to.include(\"user FirstName is mandatory and should contains alphabets only\");\r",
									"\r",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"user_first_name\": \"{{emptyfieldname}}\",\r\n\"user_last_name\": \"{{mlastname}}\",\r\n\"user_contact_number\": {{mcontactno}},\r\n\"user_email_id\": \"{{memail}}\",\r\n\"userAddress\": { \r\n \"plotNumber\": \"{{mplotno}}\",\r\n \"street\": \"{{mstreet}}\",\r\n \"state\": \"{{mstate}}\",\r\n \"country\": \"{{mcountry}}\", \r\n \"zipCode\": {{mzipcode}}\r\n } \r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/createusers",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"createusers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Lastname field validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Load data from file\r",
									"if (typeof pm.variables.get('givendatas2') !== 'object') {\r",
									"    pm.variables.set('givendatas2', pm.iterationData.toObject());\r",
									"}\r",
									"const givendatas = pm.variables.get('givendatas2');\r",
									"\r",
									"// Find the current request\r",
									"const currentRequest = givendatas.givendata.filter(({scenarioname}) => scenarioname === \"Post mandatory fields validation\")[0];\r",
									"\r",
									"// Skip the rest since we have no data\r",
									"if (!currentRequest) {\r",
									"    console.log(`Request ${pm.info.requestName} has no data defined.`);\r",
									"    return;\r",
									"}\r",
									"// Expose variables\r",
									"const variables = currentRequest.data.shift();\r",
									"if (variables===null || variables!==Object)\r",
									"    return;\r",
									"for (const [key, value] of Object.entries(variables)) {\r",
									"    pm.variables.set(key, value);\r",
									"    pm.collectionVariables.set(\"mfirstname\", pm.variables.get(\"firstname\"));\r",
									"    pm.collectionVariables.set(\"mlastname\", pm.variables.get(\"lastname\"));\r",
									"    pm.collectionVariables.set(\"mcontactno\", pm.variables.get(\"contactno\"));\r",
									"    pm.collectionVariables.set(\"memail\", pm.variables.get(\"email\"));\r",
									"    pm.collectionVariables.set(\"emptyfieldname\",pm.variables.get(\"emptyfieldname\"));\r",
									"    let useraddressproperties = pm.variables.get(\"userAddress\");\r",
									"        pm.collectionVariables.set(\"mplotno\", useraddressproperties.plotno);\r",
									"        pm.collectionVariables.set(\"mstreet\", useraddressproperties.street);\r",
									"        pm.collectionVariables.set(\"mstate\",useraddressproperties.state);\r",
									"        pm.collectionVariables.set(\"mcountry\", useraddressproperties.country);\r",
									"        pm.collectionVariables.set(\"mzipcode\", useraddressproperties.zipcode);\r",
									"};\r",
									"//pm.variables.set('givendatas', givendatas);\r",
									"\r",
									"\r",
									" \r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"    pm.expect(pm.response.text()).to.include(\"User Last Name is mandatory and should contains alphabets only\");\r",
									"\r",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"user_first_name\": \"{{mfirstname}}\",\r\n\"user_last_name\": \"{{emptyfieldname}}\",\r\n\"user_contact_number\": {{mcontactno}},\r\n\"user_email_id\": \"{{memail}}\",\r\n\"userAddress\": { \r\n \"plotNumber\": \"{{mplotno}}\",\r\n \"street\": \"{{mstreet}}\",\r\n \"state\": \"{{mstate}}\",\r\n \"country\": \"{{mcountry}}\", \r\n \"zipCode\": {{mzipcode}}\r\n } \r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/createusers",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"createusers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post contactno field validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Load data from file\r",
									"if (typeof pm.variables.get('givendatas3') !== 'object') {\r",
									"    pm.variables.set('givendatas3', pm.iterationData.toObject());\r",
									"}\r",
									"const givendatas = pm.variables.get('givendatas3');\r",
									"\r",
									"// Find the current request\r",
									"const currentRequest = givendatas.givendata.filter(({scenarioname}) => scenarioname === \"Post mandatory fields validation\")[0];\r",
									"\r",
									"// Skip the rest since we have no data\r",
									"if (!currentRequest) {\r",
									"    console.log(`Request ${pm.info.requestName} has no data defined.`);\r",
									"    return;\r",
									"}\r",
									"// Expose variables\r",
									"const variables = currentRequest.data.shift();\r",
									"if (variables===null || variables!==Object)\r",
									"    return;\r",
									"for (const [key, value] of Object.entries(variables)) {\r",
									"    pm.variables.set(key, value);\r",
									"    pm.collectionVariables.set(\"mfirstname\", pm.variables.get(\"firstname\"));\r",
									"    pm.collectionVariables.set(\"mlastname\", pm.variables.get(\"lastname\"));\r",
									"    pm.collectionVariables.set(\"mcontactno\", pm.variables.get(\"contactno\"));\r",
									"    pm.collectionVariables.set(\"memail\", pm.variables.get(\"email\"));\r",
									"    pm.collectionVariables.set(\"emptyfieldname\",pm.variables.get(\"emptyfieldname\"));\r",
									"    let useraddressproperties = pm.variables.get(\"userAddress\");\r",
									"        pm.collectionVariables.set(\"mplotno\", useraddressproperties.plotno);\r",
									"        pm.collectionVariables.set(\"mstreet\", useraddressproperties.street);\r",
									"        pm.collectionVariables.set(\"mstate\",useraddressproperties.state);\r",
									"        pm.collectionVariables.set(\"mcountry\", useraddressproperties.country);\r",
									"        pm.collectionVariables.set(\"mzipcode\", useraddressproperties.zipcode);\r",
									"};\r",
									"//pm.variables.set('givendatas', givendatas);\r",
									"\r",
									"\r",
									" \r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"   // pm.expect(pm.response.text()).to.include(\"User Contactno is mandatory\");\r",
									"\r",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"user_first_name\": \"{{mfirstname}}\",\r\n\"user_last_name\": \"{{mlastname}}\",\r\n\"user_contact_number\": {{emptyfieldname}},\r\n\"user_email_id\": \"{{memail}}\",\r\n\"userAddress\": { \r\n \"plotNumber\": \"{{mplotno}}\",\r\n \"street\": \"{{mstreet}}\",\r\n \"state\": \"{{mstate}}\",\r\n \"country\": \"{{mcountry}}\", \r\n \"zipCode\": {{mzipcode}}\r\n } \r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/createusers",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"createusers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post email field validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"    pm.expect(pm.response.text()).to.include(\"User email Id is required and should be in proper email format\");\r",
									"\r",
									"  });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Load data from file\r",
									"if (typeof pm.variables.get('givendatas') !== 'object') {\r",
									"    pm.variables.set('givendatas', pm.iterationData.toObject());\r",
									"}\r",
									"const givendatas = pm.variables.get('givendatas');\r",
									"\r",
									"// Find the current request\r",
									"const currentRequest = givendatas.givendata.filter(({scenarioname}) => scenarioname === \"Post mandatory fields validation\")[0];\r",
									"\r",
									"// Skip the rest since we have no data\r",
									"if (!currentRequest) {\r",
									"    console.log(`Request ${pm.info.requestName} has no data defined.`);\r",
									"    return;\r",
									"}\r",
									"// Expose variables\r",
									"const variables = currentRequest.data.shift();\r",
									"if (variables===null || variables!==Object)\r",
									"    return;\r",
									"for (const [key, value] of Object.entries(variables)) {\r",
									"    pm.variables.set(key, value);\r",
									"    pm.collectionVariables.set(\"mfirstname\", pm.variables.get(\"firstname\"));\r",
									"    pm.collectionVariables.set(\"mlastname\", pm.variables.get(\"lastname\"));\r",
									"    pm.collectionVariables.set(\"mcontactno\", pm.variables.get(\"contactno\"));\r",
									"    pm.collectionVariables.set(\"memail\", pm.variables.get(\"email\"));\r",
									"    pm.collectionVariables.set(\"emptyfieldname\",pm.variables.get(\"emptyfieldname\"));\r",
									"    let useraddressproperties = pm.variables.get(\"userAddress\");\r",
									"        pm.collectionVariables.set(\"mplotno\", useraddressproperties.plotno);\r",
									"        pm.collectionVariables.set(\"mstreet\", useraddressproperties.street);\r",
									"        pm.collectionVariables.set(\"mstate\",useraddressproperties.state);\r",
									"        pm.collectionVariables.set(\"mcountry\", useraddressproperties.country);\r",
									"        pm.collectionVariables.set(\"mzipcode\", useraddressproperties.zipcode);\r",
									"};\r",
									"//pm.variables.set('givendatas', givendatas);\r",
									"\r",
									"\r",
									" \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"user_first_name\": \"{{mfirstname}}\",\r\n\"user_last_name\": \"{{mlastname}}\",\r\n\"user_contact_number\": {{mcontactno}},\r\n\"user_email_id\": \"{{emptyfieldname}}\",\r\n\"userAddress\": { \r\n \"plotNumber\": \"{{mplotno}}\",\r\n \"street\": \"{{mstreet}}\",\r\n \"state\": \"{{mstate}}\",\r\n \"country\": \"{{mcountry}}\", \r\n \"zipCode\": {{mzipcode}}\r\n } \r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/createusers",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"createusers"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET",
			"item": [
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/users",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by User ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//setting given user details in collection variables for put request\r",
									"    pm.collectionVariables.set(\"firstname\", response.user_first_name);\r",
									"    pm.collectionVariables.set(\"contactno\", response.user_contact_number);\r",
									"    pm.collectionVariables.set(\"email\",response.user_email_id);\r",
									"    pm.collectionVariables.set(\"plotno\", response.userAddress.plotNumber);\r",
									"    pm.collectionVariables.set(\"street\", response.userAddress.street);\r",
									"    pm.collectionVariables.set(\"state\",response.userAddress.state);\r",
									"    pm.collectionVariables.set(\"country\", response.userAddress.country);\r",
									"    pm.collectionVariables.set(\"zipcode\", response.userAddress.zipCode);\r",
									"    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/user/{{newuserid}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"user",
								"{{newuserid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by user name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/users/username/{{newfirstname}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								"username",
								"{{newfirstname}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PUT",
			"item": [
				{
					"name": "Putbyuserid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Load data from file\r",
									"if (typeof pm.variables.get('givendatas4') !== 'object') {\r",
									"    pm.variables.set('givendatas4', pm.iterationData.toObject());\r",
									"}\r",
									"const givendatas = pm.variables.get('givendatas4');\r",
									"\r",
									"// Find the current request\r",
									"const currentRequest = givendatas.givendata.filter(({scenarioname}) => scenarioname === pm.info.requestName)[0];\r",
									"\r",
									"// Skip the rest since we have no data\r",
									"if (!currentRequest) {\r",
									"    console.log(`Request ${pm.info.requestName} has no data defined.`);\r",
									"    return;\r",
									"}\r",
									"// Expose variables\r",
									"const variables = currentRequest.data.shift();\r",
									"//if (variables===null || variables!==Object)\r",
									"  //  return;\r",
									"for (const [key, value] of Object.entries(variables)) {\r",
									"    pm.variables.set(key, value);\r",
									"    pm.collectionVariables.set(\"updatedlastname\", pm.variables.get(\"lastname\"));\r",
									"    \r",
									"};\r",
									"\r",
									"pm.variables.set('givendatas4', givendatas);\r",
									"\r",
									"// Decide where to go next\r",
									"if (currentRequest.data.length > 0) {\r",
									"    postman.setNextRequest(pm.info.requestName);\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const response = pm.response.json();\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"addressId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"plotNumber\");\r",
									"    pm.expect(pm.response.text()).to.include(\"street\");\r",
									"    pm.expect(pm.response.text()).to.include(\"state\");\r",
									"    pm.expect(pm.response.text()).to.include(\"country\");\r",
									"    pm.expect(pm.response.text()).to.include(\"zipCode\");\r",
									"    pm.expect(pm.response.text()).to.include(\"user_id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"user_first_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"user_last_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"user_contact_number\");\r",
									"    pm.expect(pm.response.text()).to.include(\"user_email_id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"creation_time\");\r",
									"    pm.expect(pm.response.text()).to.include(\"last_mod_time\");\r",
									"});\r",
									"\r",
									"// Check the values have the expected types\r",
									"pm.test(\"validate response body datatypes\", () => {\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.userAddress.addressId).to.be.a('number');\r",
									"    pm.expect(response.userAddress.plotNumber).to.be.a('string');\r",
									"    pm.expect(response.userAddress.street).to.be.a('string');\r",
									"    pm.expect(response.userAddress.state).to.be.a('string');\r",
									"    pm.expect(response.userAddress.country).to.be.a('string');\r",
									"    pm.expect(response.userAddress.zipCode).to.be.a('number');\r",
									"    pm.expect(response.user_id).to.be.a('number');\r",
									"    pm.expect(response.user_first_name).to.be.a('string');\r",
									"    pm.expect(response.user_last_name).to.be.a('string');\r",
									"    pm.expect(response.user_contact_number).to.be.a('number');\r",
									"    pm.expect(response.user_email_id).to.be.a('string');\r",
									"    pm.expect(response.creation_time).to.be.a('string');\r",
									"    pm.expect(response.last_mod_time).to.be.a('string');\r",
									"});\r",
									"\r",
									"//data validation\r",
									"pm.test(\"validate response body data\", () => {\r",
									"    pm.expect(response.userAddress.plotNumber).to.eql(pm.collectionVariables.get(\"plotno\"));\r",
									"    pm.expect(response.userAddress.street).to.eql(pm.collectionVariables.get(\"street\"));\r",
									"    pm.expect(response.userAddress.state).to.eql(pm.collectionVariables.get(\"state\"));\r",
									"    pm.expect(response.userAddress.country).to.eql(pm.collectionVariables.get(\"country\"));\r",
									"    pm.expect(response.userAddress.zipCode).to.eql(pm.collectionVariables.get(\"zipcode\"));\r",
									"    pm.expect(response.user_first_name).to.eql(pm.collectionVariables.get(\"firstname\"));\r",
									"    pm.expect(response.user_last_name).to.eql(pm.collectionVariables.get(\"updatedlastname\"));\r",
									"    pm.expect(response.user_contact_number).to.eql(pm.collectionVariables.get(\"contactno\"));\r",
									"    pm.expect(response.user_email_id).to.eql(pm.collectionVariables.get(\"email\"));\r",
									"});\r",
									"\r",
									"\r",
									"//header verification\r",
									"pm.test(\"Header validation\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//schema validation\r",
									"const responseschema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"userAddress\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"addressId\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"plotNumber\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"street\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"state\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"country\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"zipCode\": {\r",
									"                    \"type\": \"integer\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"addressId\",\r",
									"                \"plotNumber\",\r",
									"                \"street\",\r",
									"                \"state\",\r",
									"                \"country\",\r",
									"                \"zipCode\"\r",
									"            ]\r",
									"        },\r",
									"        \"user_id\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"user_first_name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"user_last_name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"user_contact_number\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"user_email_id\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"creation_time\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"last_mod_time\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"userAddress\",\r",
									"        \"user_id\",\r",
									"        \"user_first_name\",\r",
									"        \"user_last_name\",\r",
									"        \"user_contact_number\",\r",
									"        \"user_email_id\",\r",
									"        \"creation_time\",\r",
									"        \"last_mod_time\"\r",
									"    ]\r",
									"}\r",
									"pm.test(\"Validate schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(responseschema);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"user_first_name\": \"{{firstname}}\",\r\n\"user_last_name\": \"{{updatedlastname}}\",\r\n\"user_contact_number\": {{contactno}},\r\n\"user_email_id\": \"{{email}}\",\r\n\"userAddress\": { \r\n \"plotNumber\": \"{{plotno}}\",\r\n \"street\": \"{{street}}\",\r\n \"state\": \"{{state}}\",\r\n \"country\": \"{{country}}\", \r\n \"zipCode\": {{zipcode}}\r\n } \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/updateuser/{{newuserid}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"updateuser",
								"{{newuserid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DELETE",
			"item": [
				{
					"name": "delete by userid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.expect(pm.response.text()).to.include(\"User is deleted successfully\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/deleteuser/{{userid1}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"deleteuser",
								"{{userid1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete by username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"pm.expect(pm.response.text()).to.include(\"User is deleted successfully\");    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/deleteuser/username/{{newfirstname}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"deleteuser",
								"username",
								"{{newfirstname}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{username}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					"if((pm.info.requestName!==\"1Post new user creation\") && (pm.info.requestName!==\"Post firstname field validation\")&&(pm.info.requestName!==\"Post Lastname field validation\")&&(pm.info.requestName!==\"Post contactno field validation\")&&(pm.info.requestName!==\"Post email field validation\")) {",
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"    pm.response.to.have.status(\"OK\");",
					"});}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "userid1",
			"value": ""
		},
		{
			"key": "firstname",
			"value": ""
		},
		{
			"key": "lastname",
			"value": ""
		},
		{
			"key": "contactno",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "userAddress",
			"value": ""
		},
		{
			"key": "plotno",
			"value": ""
		},
		{
			"key": "street",
			"value": ""
		},
		{
			"key": "state",
			"value": ""
		},
		{
			"key": "country",
			"value": ""
		},
		{
			"key": "zipcode",
			"value": ""
		},
		{
			"key": "updatedlastname",
			"value": ""
		},
		{
			"key": "iterationtimesforpostmandatory",
			"value": ""
		},
		{
			"key": "mfirstname",
			"value": ""
		},
		{
			"key": "mlastname",
			"value": ""
		},
		{
			"key": "mcontactno",
			"value": ""
		},
		{
			"key": "memail",
			"value": ""
		},
		{
			"key": "emptyfieldname",
			"value": ""
		},
		{
			"key": "mplotno",
			"value": ""
		},
		{
			"key": "mstreet",
			"value": ""
		},
		{
			"key": "mstate",
			"value": ""
		},
		{
			"key": "mcountry",
			"value": ""
		},
		{
			"key": "mzipcode",
			"value": ""
		}
	]
}